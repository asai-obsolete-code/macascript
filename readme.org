* Yet another Javascript compiler Macascript

Macascript is a simple javascript compiler which is inspired
by parenscript and coffeescript.

I wasn't satisfied with either of them, so I made one myself.

The motivation is that Parenscript doesn't seem to fit the need of
javascript programmers. It is rather a utility for the lisp
programmers who dynamically produces javascript code on the server
side. Parenscript is still JUST LISP while Coffeescript is trying to
follow the rule "It's just JavaScript".  The syntax was more on the
Lisp side, like loop and let. (of course you can now use 'let' in the
javascript 1.8 or newer, but it is still not available on the platform
like Titanium Mobile, which I'm currently writing js programs for.)

Besides, it often produces invalid js code. (Note that I only mention about the
old version of parenscript because I haven't been watching the project
recently.) I wanted to fix that up, but the code! Parenscript's source
code was a mess for me. I gave up.

Another motivation still. As you know, coffeescript is so cool. 
It has the better, simple and beautiful syntax.
It improved almost all of the bad points in javascript.

However IT DOESN'T HAVE MACRO!!!!! 

On the smartphone product, runtime speed is highly required for the
user experience. And js is so slow compared with Obj-C or Java, the
standard language for smartphone development. Only the compile-time
macro can handle the optimization stuff like inline function, source
code simplification, etc.

Moreover, since coffeescript TRIES TO OMIT PARENTHESES, it must use
the parser. It makes the source code complicated and
PROCEDURAL. Procedual, so its not easy to extend.

* Extend the syntax

The macascript source code is really simple because the parsing of the
S-expression tree relies on pattern matching provided with cl-match.

Also defmaca macro greatly helps you extend the syntax. All
syntaxes but 'glue' and 'redundant-paren' are currently implemented
with that macro. All macro will be finally compiled into 'glue'
special macro, which just prints a series of atoms in its
arguments. 'defmaca' is almost identical to
defmacro, so the people who understands macro would feel it really
easy and fun to use.

Have fun extending js syntax!

* How to try

** recommended software
+ [[http://www.sbcl.org/][sbcl]] : The only lisp implimentation I've tested.
+ [[http://www.quicklisp.org/][quicklisp]] : great software.
+ [[http://common-lisp.net/project/slime/][slime]] : I greatly recommend you to install it if you are using
  emacs. I'm an emacs user and don't know well about vim, so if you
  have any information about a good interactive interface from vim to
  lisp please tell me about it.
+ packages : install them via quicklisp.
  + cl-match
  + alexandria
  + anaphora : I don't use it so much, but it's sometimes useful.
  + cl-ppcre

** run
Macascript is just an experimental code.
so open the REPL in the repository and input these code to the interpreter: 

+ if your implementation supports 'require:
  + (require 'macascript)
  + (in-package :maca)
  + (recompile)
+ or else:
  + (asdf:operate 'asdf:load-op 'macascript)
  + (in-package :maca)
  + (recompile)

* Examples
** Fundamentals

#+BEGIN_SRC lisp
(maca (-> (a)
          (if (a b c)                   ;multi-line then/else
              ((var d (- a b c))        ;infix argument and var declaration
               (var e (== a b c d)))                  ; multiple comparison
              ((var f '(a (b c) (+ 1 2 3)))           ; array literal
               (var g (:a a :b (b c) :c (+ 1 2 3))))) ; object literal
          ;; true if it's not undefined
          (if? a b c)

          (granpa > parent > obj > (child 2) > grandchild 3 4 5)
          ;; direct access with []
          (obj > 2 > "key" > 'key > :key)
          ;; prototype accessor
          (obj >> child > grandchild)
          (obj >> (method a))
          (obj >>)
          ;; existantial accessor
          (a ? b ? c)

	  ;; if-statement with returning a value
	  ;; and alias from "or" to ||, "and" to &&
	  (or ((if a b c) > '(if d e f)) (and (x a) (x b)))
	  ;; implicit return
	  a))
#+END_SRC

#+BEGIN_SRC js
function(a){
var d,e,f,g,temp1248,temp1249;
if(a(b,c)){
d = (a-(b-c))e = (a==b)&&(b==c)&&(c==d)}else{
f = [a,b(c),(1+(2+3))];
g = {
c:(1+(2+3)),b:b(c),a:a}}if(((a!==undefined)&&((typeof a)!=="undefined"))){
b}else{
c};
granpa.parent.obj.child(2).grandchild(3,4,5);
obj[2]["key"][key][key];
obj.prototype.child.grandchild;
obj.prototype.method(a);
obj.prototype;
(((g1246 = a.b)!=undefined))?((((g1247 = g1246.c)!=undefined))?(g1247):((void 0))):((void 0));
((if(a){
temp1248 = b;
}else{
temp1248 = c;
},temp1248)[(if(d){
temp1249 = e;
}else{
temp1249 = f;
},temp1249)]||(x(a)&&x(b)));
return(a);
}
#+END_SRC

** Procedure/Inline/Inherit-this function

#+BEGIN_SRC lisp
(maca (-/> ()
          ;; inline function: maca expands it safely
          (-/ baz (a b) (+ (some-operation a) (other-operation b)))
          (= foo (baz foo bar))

          ;; procedure function: functions without a implicit return
          (-/> (b)
              (if (< b 3)
                  (var a (- 3 b))
                  (var a (- b 3)))
              (= @a 2)                  ; alias for this[a]
              ;; inherit-this function (=>): saves 'this' of the outer environment 
              (($ "button") > (click (=> (e) (alert (this > 2))))))))
#+END_SRC

#+BEGIN_SRC js
function(){
	var tmp1443,tmp1444,tmp24;
	;
	
	tmp1444 = bar;
	tmp1443 = foo;
	tmp24 = (someOperation(tmp1443) + otherOperation(tmp1444));foo = tmp24;
	function(b){
		var a,t1452,f1453;
		t1452 = this;
		f1453 = function(e){
			return alert(t1452[2]);
		};
		if((b<3)){a = (3 NIL b)
		}else{a = (b NIL 3)
		};
		this.a = 2;
		$("button").click(f1453);
	};
};
#+END_SRC

** other supported syntaxes

+ Try-Catch-Finally.
+ Iteration. It automatically collects the value of implicit return,
  but it won't do it when it's not needed.
+ while, do-while (which returns a value)
+ switch, with multiple cases

** Using defmaca to define a new syntax

Because macascript inherited the power of Macro from Common Lisp,
macascript has its own syntax ``defmaca'' which defines a new macascript
syntax.

#+BEGIN_SRC lisp
(defmaca my-if (condition then &optional else)
  `(if ,condition
       ,then
       ,else))

(maca (-> (a) (my-if a true false)))

#+END_SRC

If you really want to use the example above, you have to 
add the syntax pattern to the appropriate parameter. This will be
soon improved so that DEFMACA takes another argument for the
matching pattern and automatically add it to the list.

See the another example below. I've implemented call/cc!

#+BEGIN_SRC lisp
(maca ((console > log
 (with-cc (cont1) (cont1 (confirm "one")))
 (with-cc (cont2) (cont2 (confirm "two")))
 5
 (with-cc (cont3) (cont3 (confirm "three")))
 4)))
#+END_SRC

#+BEGIN_SRC js
var arg1477;

console.log.apply(this,arg1477 = (function(cont1){
	cont1(confirm("one"));
})((function(cont2){
	cont2(confirm("two"));
})((function(cont3){
	cont3(confirm("three"));
})(function(valueArg1461){
	return function(valueArg1458){
		return function(valueArg1455){
			var tmp121;
			return tmp121 = [valueArg1455,valueArg1458,5,valueArg1461,4];
		};
	};
})))());;
#+END_SRC

see test.maca for more examples.

* license

Currently I haven't decided which license I should choose. 
Please give me some advice.

* Author

Masataro Asai (guicho2.71828@gmail.com)
Univ. of Tokyo

