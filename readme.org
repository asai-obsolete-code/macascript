* Yet another Javascript compiler Macascript

Macascript is a simple javascript compiler which is inspired
by parenscript and coffeescript.

I wasn't satisfied with either of them, so I made one myself.

The motivation is that Parenscript doesn't seem to fit the need of
javascript programmers. It is rather a utility for the lisp
programmers who dynamically produces javascript code on the server
side. Parenscript is still JUST LISP while Coffeescript is trying to
follow the rule "It's just JavaScript".  The syntax was more on the
Lisp side, like loop and let. (of course you can now use 'let' in the
javascript 1.8 or newer, but it is still not available on the platform
like Titanium Mobile, which I'm currently writing js programs for.)

Besides, it often produces invalid js code. (Note that I only mention about the
old version of parenscript because I haven't been watching the project
recently.) I wanted to fix that up, but the code! Parenscript's source
code was a mess for me. I gave up.

Another motivation still. As you know, coffeescript is so cool. 
It has the better, simple and beautiful syntax.
It improved almost all of the bad points in javascript.

However IT DOESN'T HAVE MACRO!!!!! 

On the smartphone product, runtime speed is highly required for the
user experience. And js is so slow compared with Obj-C or Java, the
standard language for smartphone development. Only the compile-time
macro can handle the optimization stuff like inline function, source
code simplification, etc.

Moreover, since coffeescript TRIES TO OMIT PARENTHESES, it must use
the parser. It makes the source code complicated and
PROCEDURAL. Procedual, so its not easy to extend.

* Help me extend the syntax

The macascript source code is really simple because the parsing of the
S-expression tree relies on pattern matching provided with cl-match.

Also my defmaca macro greatly helps you extend the syntax easily. All
syntaxes but 'glue' and 'redundant-paren' are currently implemented
with that macro. All macro will be finally compiled into 'glue'
special macro, which just prints a series of atoms in its &rest
arguments. 'defmaca' is almost identical to
defmacro, so the people who understands macro would feel it really
easy and fun to use.

Have fun extending js syntax and help me!

* Examples

#+BEGIN_SRC lisp
(maca (-> (a)
          (if (a b c)                   ;multi-line then/else
              ((var d (- a b c))        ;infix argument and var declaration
               (var e (== a b c d)))                  ; multiple comparison
              ((var f '(a (b c) (+ 1 2 3)))           ; array literal
               (var g (:a a :b (b c) :c (+ 1 2 3))))) ; object literal
          ;; true if it's not undefined
          (if? a b c)

          ;; object accessor
          (obj > attibute)
          (granpa > parent > obj > child > grandchild)
          ;; using methods 
          (obj > (child 2) > (grandchild 3 4 5))
          ;; direct access with []
          (obj > 2 > "key" > 'key > :key)
          ;; prototype accessor
          (obj >> child > grandchild)
          (obj >> (method a))
          (obj >>)
          ;; existantial accessor
          (a ? b ? c)
	  ;; implicit return
	  a))
#+END_SRC

#+BEGIN_SRC js
function(a){
var d,e,f,g;
if(a(b,c)){
d = (a - (b - c));
e = (a==b)&&(b==c)&&(c==d);
}else({
f = [a,b(c),(1 + (2 + 3))];
g = {
c:(1 + (2 + 3)),b:b(c),a:a};
});
if(((a!==undefined) && ((typeof a)!=="undefined"))){
b}else({
c});
obj.attibute;
granpa.parent.obj.child.grandchild;
obj.child(2).grandchild(3,4,5);
obj[2]["key"][key][key];
obj.prototype.child.grandchild;
obj.prototype.method(a);
obj.prototype;
(((g1683 = a.b)!=undefined))?((((g1684 = g1683.c)!=undefined))?(g1684):((void 0))):((void 0));
return(a);
}
#+END_SRC

#+BEGIN_SRC lisp
(maca (-/> ()
          ;; inline argument: maca expands it safely
          (-/ baz (a b) (+ (some-operation a) (other-operation b)))
          (= foo (baz foo bar))

          ;; procedure function: a function without implicit return
          (-/> (b)
              (if (< b 3)
                  (var a (- 3 b))
                  (var a (- b 3)))      ;var keyword will be compacted at the beginning of function
              (= @a 2)                  ;alias for this[a]
              
              ;; inherit-this function (=>): saves 'this' of the outer environment 
              (($ "button") > (click (=> (e) (alert (this > 2))))))))
#+END_SRC

#+BEGIN_SRC js
function(){
var tmp1686,tmp1687;
; // is this a bug?
foo = (tmp1687 = bar,tmp1686 = foo,(some-operation(tmp1686) + other-operation(tmp1687)));
function(b){
var a,t1688,f1689;
t1688 = this;
f1689 = function(e){
return(alert(t1688[2]));
};
if((b<3)){
a = (3 - b)}else({
a = (b - 3)});
@a = 2;
$("button").click(f1689);
};
}
#+END_SRC

#+BEGIN_SRC lisp
(maca           ;; try-catch-finally
          (try ((drink 3 "beer")
                (eat 5 pizza))
               catch (x)
               ((if (== x "drunkTooMuch")
                    (puke)
                    (take digestive)))
               finally
               ((pay money)
                (go home))))
#+END_SRC

#+BEGIN_SRC js
try{
drink(3,"beer");
eat(5,pizza);
}catch(x){
if((x=="drunkTooMuch")){
puke()}else({
take(digestive)});
}finally{
pay(money);
go(home);
}
#+END_SRC

#+BEGIN_SRC lisp
(maca ;; iteration
          (for elem in ary         (alert elem))
          (for elem i in ary       (alert elem i))
          (for elem of obj         (alert elem))
          (for elem key of ary     (alert elem i))
          (for own elem key of ary (alert elem i))
          (for own elem of ary     (alert elem i))
          (for ((var i 0) (< i 10) (++ i))
            (alert "hello!")
            (alert i)))
#+END_SRC

#+BEGIN_SRC js
var g1707,ref1709,l1708,ref1711,l1710,g1712,ref1713,ref1714,key,ref1715,elem,own,ref1716,i;
ref1709 = ary;
l1708 = ref1709.length;
for(g1707 = 0;
(g1707<l1708);
(++ g1707);
){
elem = ref1709[g1707];
alert(elem);
};
ref1711 = ary;
l1710 = ref1711.length;
for(i = 0;
(i<l1710);
(++ i);
){
elem = ref1711[i];
alert(elem,i);
};
ref1713 = obj;
for((g1712 in obj)){
elem = ref1713[g1712];
alert(elem);
};
ref1714 = ary;
for((key in ary)){
elem = ref1714[key];
alert(elem,i);
};
ref1715 = ary;
for((key in ary)){
elem = ref1715[key];
if((! elem.hasownproperty(key))){ // ouch, this is a bug
continue()};
alert(elem,i);
};
ref1716 = ary;
for((elem in ary)){
own = ref1716[elem];
alert(elem,i);
};
for(i = 0;
(i<10);
(++ i);
){
alert("hello!");
alert(i);
};
#+END_SRC
#+BEGIN_SRC lisp
(maca          ;; while and do-while
          (while true
            ((alert "Let's do it tomorrow")
             (alert "Let's do it tomorrow")))

          ;; good methodology
          (do 
           ((alert "Let's do it now")
            (alert "hush hush")
            (alert "hush hush"))
           while (not tired))) ;; not is an alias for !
#+END_SRC

#+BEGIN_SRC js
while(true){
alert("Let's do it tomorrow");
alert("Let's do it tomorrow");
};
do{
alert("Let's do it now");
alert("hush hush");
alert("hush hush");
}while((! tired));
#+END_SRC
#+BEGIN_SRC lisp
(maca ;; switch
          (switch x
            (case 1
              (alert x))                        ;1 case 1 statement
            (case 2                             ;1 case 2 statements
              (alert 22)
              (alert 22))
            (cases (3 4)                        ;2 cases 1 statements
                   (alert x))
            (cases ((sqrt 2)
                    (sqrt 3))           ;2 cases 2 statements
                   (alert x) 
                   (alert x))
            (default
                (alert "default")
                (alert "default")
              (alert "default"))))       ;defaults
#+END_SRC

#+BEGIN_SRC js
switch(x){
case 1:alert(x)break;
case 2:alert(22)alert(22)break;

case 3:
case 4:alert(x)break;

case sqrt(2):
case sqrt(3):alert(x)alert(x)break;
default:alert("default");
alert("default");
alert("default");
}
#+END_SRC

see test.maca for more examples.

* How to try

** recommended software
+ [[http://www.sbcl.org/][sbcl]] : The only lisp implimentation I've tested.
+ [[http://www.quicklisp.org/][quicklisp]] : great software.
+ [[http://common-lisp.net/project/slime/][slime]] : I greatly recommend you to install it if you are using
  emacs. I'm an emacs user and don't know well about vim, so if you
  have any information about a good interactive interface from vim to
  lisp please tell me about it.
+ packages : install them via quicklisp.
  + cl-match
  + alexandria
  + anaphora : I don't use it so much, but it's sometimes useful.

** run
input these code to the interpreter: 

       (load "maca.lisp")
       (in-package :maca)

* license

Currently I haven't decided which license I should choose. 
Please give me some advice.

* Author

Masataro Asai (guicho2.71828@gmail.com)
Univ. of Tokyo

