;; these script below are just a sketch before the implementation.
;; these are no longer valid now.
;; however, some ideas like 'set' are what i want to implement soon.

;;   ;; set has almost the same meaning as =,
;;   ;; but it has the setf feature
;;   (set opposite on) 
;;   (set opposite yes)

;;   (eq true on yes t)						;-> t
;;   (eq false off no t)						;-> t

;;   ;; destructuring-bind is almost the same as common-lisp but its 
;;   ;; name "bind", not "destructuring-bind".
;;   ;; 
;;   ;; bind creates a closure.
;;   (bind (x y) (/ a b)
;; 		(dosomething))

;;   ;; this does not create a closure. the argument should be quoted
;;   (set '(x y) (/ a b))

;;   ;; maca provides the setf feature.
;;   ;; it throws an error if the first argument does not return Object.

;;   (set setfary 
;; 	   (setf->
;; 		(-> (ary x) (ary > x))	; return ary[x]
;; 		(-> (ary x)
;; 			(-> (value)
;; 				(set (ary > x) value)))))


;; extended lambda-list in the function definition

;; in javascript, every function can take insufficient arguments 
;; and also superfluous arguments (via `arguments' special variable).
;; therefore, macascript doesn't support &optional argument
;; while it supports &rest and &key.
;; 

(maca ((var fn1 (-> (a (b 2) (c 3) &rest others)
					definitions...))
	   (var fn2 (-> (a &key b (c nil) (d nil d-supplied-p))
					...))
	   (fn1 1 2 3 4 5 6)
	   (fn1 1 2)
	   (fn1)
	   (fn2 1 :b 2 :c 3)))

;; the implementation of &key arguments does NOT use the object literal
;; to pass those arguments, because of the cost of making those literals.
